{"meta":{"title":"zhanglijie博客","subtitle":"当你的才华还撑不起你的野心的时候，你就应该静下心来，学习;当你的能力还驾驭不了你的目标时，就应该沉下心来，历练","description":"xxx","author":"zljx","url":"https://github.com/zljx/zljx.github.io.git"},"pages":[{"title":"about","date":"2019-11-16T13:25:20.000Z","updated":"2019-11-16T13:25:20.101Z","comments":true,"path":"about/index-2.html","permalink":"https://github.com/zljx/zljx.github.io.git/about/index-2.html","excerpt":"","text":""},{"title":"about","date":"2019-11-16T13:22:40.000Z","updated":"2019-11-16T13:22:40.572Z","comments":true,"path":"about/index-1.html","permalink":"https://github.com/zljx/zljx.github.io.git/about/index-1.html","excerpt":"","text":""},{"title":"about","date":"2019-11-16T12:52:13.000Z","updated":"2019-11-16T12:52:13.130Z","comments":true,"path":"about/index.html","permalink":"https://github.com/zljx/zljx.github.io.git/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Java：素数","slug":"Java：素数","date":"2019-11-21T12:54:20.000Z","updated":"2019-11-21T12:56:03.529Z","comments":true,"path":"2019/11/21/Java：素数/","link":"","permalink":"https://github.com/zljx/zljx.github.io.git/2019/11/21/Java%EF%BC%9A%E7%B4%A0%E6%95%B0/","excerpt":"","text":"java 输入N以内的全部素数 1234567891011121314151617181920212223242526272829303132package ex3;import java.util.*;public class Sushu &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub @SuppressWarnings(&quot;resource&quot;) Scanner reader=new Scanner(System.in); int n=reader.nextInt(); if(n&gt;=2) &#123; System.out.printf(2+&quot; &quot;); for(int i=3;i&lt;=n;i++) &#123; int s=1; for(int j=2;j&lt;i;j++) &#123; if(i%j==0) &#123; s=0; break; &#125; &#125; if(s!=0) System.out.printf(i+&quot; &quot;); &#125; &#125; else return; &#125;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://github.com/zljx/zljx.github.io.git/tags/java/"}],"keywords":[]},{"title":"数据结构栈","slug":"数据结构栈","date":"2019-11-17T07:44:20.000Z","updated":"2019-11-17T07:45:30.344Z","comments":true,"path":"2019/11/17/数据结构栈/","link":"","permalink":"https://github.com/zljx/zljx.github.io.git/2019/11/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A0%88/","excerpt":"","text":"#数据结构##顺序栈 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;iostream&gt;using namespace std;#define MAX 10typedef struct&#123; int base; int top; int s[MAX];&#125;SqStack;//基本操作说明void InitStack(SqStack &amp;S);void push(SqStack &amp;S,int e);void pop(SqStack &amp;S,int &amp;e);//基本操作的算法描述void InitStack(SqStack &amp;S)&#123; S.base=S.top=0;&#125;void push(SqStack &amp;S,int e)&#123; if(S.top==MAX) &#123; cout&lt;&lt;&quot;栈满&quot;&lt;&lt;endl; return; &#125; S.s[S.top]=e; S.top+=1;&#125;void pop(SqStack &amp;S,int &amp;e)&#123; if(S.top==0) &#123; cout&lt;&lt;&quot;栈空&quot;&lt;&lt;endl; return; &#125; S.top-=1; e=S.s[S.top];&#125;void print(SqStack S)&#123; cout&lt;&lt;&quot;栈的各个元素如下：&quot;&lt;&lt;endl; for(int i=0;i&lt;S.top;i++) cout&lt;&lt;S.s[i]&lt;&lt;&apos; &apos;; cout&lt;&lt;endl;&#125;int main()&#123; SqStack S; //初始化 cout&lt;&lt;&quot;初始化栈&quot;&lt;&lt;endl; InitStack(S); cout&lt;&lt;&quot;栈底和栈顶：&quot;&lt;&lt;S.base&lt;&lt;&apos;,&apos;&lt;&lt;S.top&lt;&lt;endl; //入栈 cout&lt;&lt;&quot;5个元素入栈\\n&quot;; for(int i=0;i&lt;5;i++) &#123; push(S,2*i+i); cout&lt;&lt;&quot;栈顶为：&quot;&lt;&lt;S.top&lt;&lt;endl; &#125; print(S); //出栈 int x; pop(S,x); cout&lt;&lt;&quot;出栈元素为:&quot;&lt;&lt;x&lt;&lt;&quot;栈顶&quot;&lt;&lt;S.top&lt;&lt;endl; print(S); return 0;&#125;","categories":[],"tags":[{"name":"顺序栈","slug":"顺序栈","permalink":"https://github.com/zljx/zljx.github.io.git/tags/%E9%A1%BA%E5%BA%8F%E6%A0%88/"}],"keywords":[]},{"title":"数据结构顺序表","slug":"数据结构顺序表","date":"2019-11-13T13:38:42.000Z","updated":"2019-11-13T13:41:53.512Z","comments":true,"path":"2019/11/13/数据结构顺序表/","link":"","permalink":"https://github.com/zljx/zljx.github.io.git/2019/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A1%BA%E5%BA%8F%E8%A1%A8/","excerpt":"","text":"顺序表的插入、删除、遍历 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;iostream&gt;using namespace std;#define MAX 15typedef struct&#123; int elem[MAX]; int length;&#125;Sqlist;void Initlist_sq(Sqlist &amp;L);void ListInsert_sq(Sqlist &amp;L,int i,int e);void ListDel_sq(Sqlist &amp;L,int i,int &amp;e);void print_sq(Sqlist L);//函数的定义void Initlist_sq(Sqlist &amp;L)//定义空链表&#123; L.length=0;&#125;void ListInsert_sq(Sqlist &amp;L,int i,int e)//插入元素&#123; int *q,*p; if(i&lt;1||i&gt;L.length) return; q=&amp;L.elem[i-1];//插入位置 for(p=&amp;L.elem[L.length-1];p&gt;=q;--p) *(p+1)=*p; *q=e; ++L.length; return;&#125; void ListDel_sq(Sqlist &amp;L,int i,int &amp;e)//删除元素&#123; if(i&lt;1||i&gt;L.length) return; e=L.elem[i-1]; for(int j=i;j&lt;L.length;j++) L.elem[j-1]=L.elem[j]; --L.length;&#125;void print_sq(Sqlist L)&#123; int *p,*q=&amp;L.elem[L.length-1];//指向尾元素的位置 for(p=L.elem;p&lt;=q;p++) cout&lt;&lt;*p&lt;&lt;&apos; &apos;; cout&lt;&lt;&quot;\\n&quot;;&#125;int main()&#123; int a[11]=&#123;10,20,30,40,50,60,70,80,90,100&#125;; Sqlist L; //初始化顺序表 Initlist_sq(L); cout&lt;&lt;&quot;现在的表长为：&quot;&lt;&lt;L.length&lt;&lt;endl; //插入10个元素 for(int i=1;i&lt;=10;i++) ListInsert_sq(L,i,a[i-1]); cout&lt;&lt;&quot;现在的表长为：&quot;&lt;&lt;L.length&lt;&lt;endl; //遍历 print_sq(L); cout&lt;&lt;&quot;现在的表长为：&quot;length&lt;&lt;endl; //删除第5个元素 int x; ListDel_sq(L,5,x); cout&lt;&lt;&quot;删除的元素是：&quot;&lt;&lt;x&lt;&lt;endl; cout&lt;&lt;&quot;删除第 5 个元素后的表：&quot;&lt;&lt;endl; print_sq(L); cout&lt;&lt;&quot;现在的表长为：&quot;&lt;&lt;endl; return 0;&#125;","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://github.com/zljx/zljx.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"keywords":[]},{"title":"Java String","slug":"Java-String","date":"2019-11-12T11:42:49.000Z","updated":"2019-11-12T13:34:01.792Z","comments":true,"path":"2019/11/12/Java-String/","link":"","permalink":"https://github.com/zljx/zljx.github.io.git/2019/11/12/Java-String/","excerpt":"","text":"编写一个Java应用程序，实现如下功能： （1） 判断两个字符串是否相同，s1=”you are a student”，s2=”how are you”； （2） 判断字符串”22030219851022024”的前缀、后缀是否和某个字符串”220302”相同； （3） 按字典顺序比较两个字符串”你”和”我”的大小关系； （4） 将数字型字符串”100”和”123.678”转换为数字； （5） 将字符串”FEDCBA”存放到数组中，调用for循环读出数组数据显示在屏幕上。———————————————— 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package string;public class Ex1 &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub //判断两字符是否相等 String s1=new String(&quot;you are a strdent&quot;), s2=new String(&quot;how are you&quot;); if(s1.equals(s2))&#123; System.out.println(&quot;s1与s2相同&quot;); &#125; else&#123; System.out.println(&quot;s1与s2不相同&quot;); &#125; //判断两字符的前缀是否相同 String s3=new String(&quot;220302199911225720&quot;); if(s3.startsWith(&quot;220302&quot;))&#123; System.out.println(&quot;吉林省的身份证&quot;); &#125; //按字典顺序排序 String s4=new String(&quot;你&quot;), s5=new String(&quot;我&quot;); if(s4.compareTo(s5)&gt;0)&#123; System.out.println(&quot;按字典序，s4大于s5&quot;); &#125; else&#123; System.out.println(&quot;按字典序，s4小于s5&quot;); &#125; //检索字符的位置 int position=0; String path=&quot;C:\\\\java\\\\jsp\\\\A.java&quot;;//因为一个“\\”+“字母”，会出现转义的意思，所以加两个“\\” position=path.lastIndexOf(&quot;\\\\&quot;);//获取path中最后出现目录分隔符的位置 System.out.println(&quot;C:\\\\java\\\\jsp\\\\A.java 中最后出现的位置&quot;+position); //将字符型的数字，转换成int或double类的能计算的数据 String fileName=path.substring(12); System.out.println(&quot;C:\\\\java\\\\jsp\\\\A.java 中含有的文件名：&quot;+fileName); String s6=new String(&quot;100&quot;), s7=new String(&quot;123.678&quot;); int n1=Integer.parseInt(s6);//将s6转化成int型数据 double n2=Double.parseDouble(s7);//将s7转化成double型数据 double m=n1+n2; System.out.println(m); //字符型数字与能计算的数字之间的相互转化 String s8=String.valueOf(m);//将数字改成字符型，string调用valueof（int n）方法将m转化为字符串对象，也可以使用Double to String(); position=s8.indexOf(&quot;.&quot;);//从“.”后开始检索 String temp=s8.substring(position+1); System.out.println(&quot;数字&quot;+m+&quot;有&quot;+temp.length()+&quot;为小数&quot;); //将字符串放到数组中 String s9=new String(&quot;ABCDEF&quot;); char a[]=s9.toCharArray();//将s9存放到数组a中 for(int i=a.length-1;i&gt;=0;i--)&#123; System.out.printf(&quot;%3c&quot;,a[i]); &#125; &#125;&#125; 1、int compareTo(String anotherString) //按字典顺序比较两个字符串。返回值为一个数字 2、int indexOf(int ch) //返回指定字符在此字符串中第一次出现处的索引。最后结果是一个字符 int lastIndexOf(int ch) // 返回指定字符在此字符串中最后一次出现处的索引。返回结果为int型的数字 3、String substring(int beginIndex, int endIndex)//从原字符串截取一个子串，注：不能截到endIndex，只能截到他的前一位 4、int n1=Integer.parseInt(s6); //将s6转化成int型数据 double n2=Double.parseDouble(s7); //将s7转化成double型数据 String valueOf(int i) //返回 int 参数的字符串表示形式,将数字转化为字符 5、String s9=new String(&quot;ABCDEF&quot;); char a[]=s9.toCharArray();//将s9存放到数组a中","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://github.com/zljx/zljx.github.io.git/tags/java/"}],"keywords":[]},{"title":"Java:接口","slug":"Java-接口","date":"2019-11-11T13:29:49.000Z","updated":"2019-11-11T13:30:27.350Z","comments":true,"path":"2019/11/11/Java-接口/","link":"","permalink":"https://github.com/zljx/zljx.github.io.git/2019/11/11/Java-%E6%8E%A5%E5%8F%A3/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package hello;public class Student &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub ComputeTotalSales[] goods=new ComputeTotalSales[50]; for(int i=0;i&lt;goods.length;i++)&#123; if(i%3==0) goods[i]=new Television(); else if(i%3==1) goods[i]=new Computer(); else if(i%3==2) goods[i]=new Mobile(); &#125; Shop shop=new Shop(goods); System.out.println(&quot;商店年销售额：&quot;+shop.giveTotalSales()); &#125;&#125;interface ComputeTotalSales&#123; public double totalSalesByYear();&#125;class Television implements ComputeTotalSales &#123; public double totalSalesByYear()&#123; return 80000.0; &#125;&#125;class Computer implements ComputeTotalSales &#123; public double totalSalesByYear()&#123; return 40000.0; &#125;&#125;class Mobile implements ComputeTotalSales &#123; public double totalSalesByYear()&#123; return 20000.0; &#125;&#125;class Shop&#123; ComputeTotalSales[] goods; double totalSales=0; Shop(ComputeTotalSales[] goods)&#123; this.goods=goods; &#125; public double giveTotalSales()&#123; totalSales=0; for(int i=0;i&lt;goods.length;i++) totalSales=totalSales+goods[i].totalSalesByYear(); return totalSales; &#125;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://github.com/zljx/zljx.github.io.git/tags/java/"}],"keywords":[]},{"title":"Java:上转型对象","slug":"Java-上转型对象","date":"2019-11-11T13:04:01.000Z","updated":"2019-11-11T13:24:05.270Z","comments":true,"path":"2019/11/11/Java-上转型对象/","link":"","permalink":"https://github.com/zljx/zljx.github.io.git/2019/11/11/Java-%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839package hello;public class Ex2 &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub A a; B b=new B(); a=b; System.out.println(&quot;两数之和为：&quot;+a.f1(3, 5)); System.out.println(&quot;两数之差为：&quot;+a.f2(3,4)); A c; C d=new C(); c=d; System.out.println(&quot;两数之积为：&quot;+c.f1(3, 5)); System.out.println(&quot;两数的平方和为：&quot;+c.f2(3,4)); &#125;&#125;abstract class A&#123; public abstract int f1(int x,int y); public abstract double f2(double x,double y); &#125;class B extends A&#123; public int f1(int x,int y)&#123; return x+y; &#125; public double f2(double x,double y)&#123; return x-y; &#125;&#125;class C extends A&#123; public int f1(int x,int y)&#123; return x*y; &#125; public double f2(double x,double y)&#123; return x*x+y*y; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://github.com/zljx/zljx.github.io.git/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://github.com/zljx/zljx.github.io.git/tags/java/"}],"keywords":[{"name":"Java","slug":"Java","permalink":"https://github.com/zljx/zljx.github.io.git/categories/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-11T12:07:19.325Z","updated":"2019-11-13T05:44:25.626Z","comments":true,"path":"2019/11/11/hello-world/","link":"","permalink":"https://github.com/zljx/zljx.github.io.git/2019/11/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}